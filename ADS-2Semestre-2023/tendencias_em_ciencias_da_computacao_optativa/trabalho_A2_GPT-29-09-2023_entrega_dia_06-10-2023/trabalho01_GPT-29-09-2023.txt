- Procurando pelo cálculo matematico mais dificil (Riemann Hypothesis) encontrei um 
dev Lean que fez uma lib para esse problema, github do cara: 
https://github.com/bhgomes

- Entrando no projeto dele (Crypto moedas) como contribuinte interessado, 
Após cadastro simples com formulario de trampo fui redirecionado para:
https://airtable.com/appErMBd3EsP6p5IZ/shrqOfR30YfKmr5gJ

----------------------------------------------------------------------------------------

O que é GPT?

- Quais ferramentas de I.A atuam (trabalham) na minha área?

- O que "sobra"? O que em sua análise (Grupo) as I.A's NÃO desenvolvem? 
    - Trabalhos que exigem criatividades;
    - Ela não entende de humor, ou piadas...


- Cadeias de Markov (Modelo mais simples): 
Base para os corretores ortográficos do teclado;
Problema: Como só considera a palavra anterior perde o sentido facilmente se sair clicando;
Porisso deve-se considerar TODA a sequência anterior, para manter sentido nas próximas;
O ponto acima é o tal contexto, ou seja, a palavra do meio tem diferentes significados a depender das anteriores;

"Eu gosto de comer maçãs"
"Ela gosta de jogar tênis"
"Ele prefere ler livros"

Tokens: ou N-GRAM 

1. Eu 
2. gosto
3. de
4. comer
5. maçãs
6. Ela
7. gosta
8. jogar
9. tênis
10. Ele
11. prefere
12. ler
13. livros

- Possíveis transições e suas probabilidades: (Memória de 1 palavra anterior)

- Isso é o tal "modelo"
- Cada linha dessas de probabilidades são os tais "parâmetros"
- No GPT-4 são 170 Trilhões de linhas;

- "Eu": gosto (100%) 
- "gosto": de (100%)
- "de": comer (50%), ou jogar (50%) 
- "comer": maçãs (100%)
- "maçãs": Eu (100%)

- "Ela": gosta (100%)
- "gosta": de (100%)
- "de": jogar, ler
- "jogar": tênis (100%)
- "tênis": Ela (100%)

- "Ele": prefere (100%)
- "prefere": ler (100%)
- "ler": livros (100%)
- "livros": Ele (100%)


- Possíveis transições e suas probabilidades: (Memória de 2 palavras anteriores)

"Eu gosto de comer maçãs"
"Ela gosta de jogar tênis"
"Ele prefere ler livros"

- Isso é o tal "modelo"

- "Eu gosto": de (100%)
- "gosto de": comer (100%)
- "de comer": maçãs (100%) <- Aqui a diferença aparecendo
- "comer maçãs": Eu (100%)

- "Ela gosta": de (100%)
- "gosta de": jogar (100%)
- "de jogar": tênis (100%)  
- "jogar tênis": Ela (100%)

- "Ele prefere": ler (100%)
- "prefere ler": livros (100%)
- "ler livros": Ele (100%)


- Possíveis transições e suas probabilidades: (Memória de 3 palavras anteriores)

- Isso é o tal "modelo"

"Eu gosto de comer maçãs"
"Ela gosta de jogar tênis"
"Ele prefere ler livros"


- "Eu gosto de": comer (100%)
- "gosto de comer": maçãs (100%)
- "de comer maçãs": Eu (100%)

- "Ela gosta de": jogar (100%)
- "gosta de jogar": tênis (100%)
- "de jogar tênis": Ela (100%)  

- "Ele prefere ler": livros (100%)
- "prefere ler livros": Ele (100%)


---------------------------------------------------------------------------------
BÔNUS DAS POSSIBILIDADES COM I.A DE IMAGEM:

- Real-ESRGAN: Inteligência Artificial OPEN SOURCE para otimizar Imagens;
- A entrada dela é imagem, logo, devemos fragmentar os frames dos vídeos com FFMPEG;
- Após fragmentar, executamos o ESRGAN para cada um dos frames, o processo é demorado;
- Após finalizado, re-montamos o vídeo concatenando as imagens e o áudio com FFMPEG;
- Um vídeo de 3 minutos em 240p demorou 50 minutos para otimizar em 1080p (Full HD);
- Lembrando que ela não faz milagres, então não adiciona detalhes e sim aumenta a escala;

- Processo todo automatizado no google colab:
https://colab.research.google.com/github/yuvraj108c/4k-video-upscaler-colab/blob/main/4k_Video_Upscaler_Colab_(Real_ESRGAN).ipynb


- 1o - Devemos baixar o vídeo e depois upar ele no colab ou google drive;
- 2o - Carregamos o vídeo no link de cima;
- 3o - Executamos em ordem os scripts python;
- 4o - Fim, temos o vídeo remasterizado;
